Epic,Task,Subtask
Epic: Core Infrastructure Setup,,
,Set up Docker environment,
,,RabbitMQ with management dashboard
,,Redis cache for job tracking
,,.env template for all services
,Add base logging config,
,Integrate Docker Compose health checks,
,Add makefile or invoke tasks for dev automation,
Epic: Manager Service,,
,API Endpoints,
,,/subtitles/download
,,/subtitles/translate
,,/subtitles/status/{job_id}
,,/webhooks/jellyfin
,Job Orchestrator,
,,Implement publish_event() abstraction (RabbitMQ)
,,"Implement consumer for SUBTITLE_READY, JOB_FAILED"
,,Implement job registry with Redis
,Testing,
,,Unit tests for all API routes
,,Integration tests for queue publishing
,,Mocked Redis + RabbitMQ test harness
Epic: Subtitle Downloader Service,,
,Implement connection to OpenSubtitles API (API key),
,Add search logic (hash → query fallback),
,Normalize downloaded files to UTF-8 .srt,
,Publish SUBTITLE_READY or SUBTITLE_MISSING events,
,Implement retry/backoff on API errors,
,Add tests for file normalization + mock API,
Epic: Translator Service,,
,Add translation pipeline,
,,Read .srt or .vtt → parse segments
,,Send to OpenAI (stream or batch)
,,Merge translated results
,Publish TRANSLATION_COMPLETED event,
,Error handling: invalid encoding / token overflow,
,Unit tests with fake translation backend,
Epic: Library Scanner Service,,
,File system watcher (watch /media),
,Jellyfin Webhook listener,
,WebSocket listener for real-time Jellyfin updates,
,Event publisher to Manager (SUBTITLE_REQUESTED),
,Debounce / duplicate prevention logic,
Epic: Shared Components,,
,Define common/schemas.py,
,,"EventEnvelope, SubtitleDownloadRequest, TranslationRequest"
,,"SubtitleReadyEvent, JobRecord"
,"Implement common/utils.py (timestamp, job_id, validation)",
,Unit tests for model validation and serialization,
Epic: Testing & QA,,
,Unit tests (pytest),
,Integration tests with Docker Compose (RabbitMQ + Redis),
,"Pre-commit hooks (black, isort, flake8)",
,GitHub Actions CI workflow,
,Local dev guide (README.md),
Epic: Monitoring & Observability,,
,Structured logging in all services,
,Prometheus-compatible metrics endpoints,
,Error tracking (Sentry or custom),
,Debug dashboard in Manager (/debug/status),
Epic: Future Enhancements,,
,Web UI dashboard (React/Next.js),
,Plugin integration for Plex,
,Configurable translation queue priority,
,"Support for additional subtitle providers (Subscene, Podnapisi)",
,Async scaling with Kubernetes (Helm + autoscaling),
