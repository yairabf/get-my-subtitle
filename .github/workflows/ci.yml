name: CI Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 1. Basic Linting - Code Quality Checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black==24.10.0 isort==5.13.2
    
    - name: Check code formatting with Black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .

  # 2. Unit Tests - Single Python Version
  unit-tests:
    name: Unit Tests (Python 3.11)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/common tests/downloader tests/manager tests/translator \
          --cov=common \
          --cov=manager \
          --cov=downloader \
          --cov=translator \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=60 \
          -v
      env:
        REDIS_URL: redis://localhost:6379
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/
    
    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
        retention-days: 7

  # 3. Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        timeout 30 bash -c 'until nc -z localhost 5672; do sleep 1; done'
    
    - name: Run integration tests
      run: pytest tests/integration/ -v
      env:
        REDIS_URL: redis://localhost:6379
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/

  # 4. Security Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety==3.2.10 bandit==1.7.10
    
    - name: Check dependencies for known vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true
      continue-on-error: true
    
    - name: Run Bandit security scan
      run: |
        bandit -r common/ manager/ downloader/ translator/ \
          -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 14

  # CI Status Check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security]
    if: always()
    
    steps:
    - name: Check CI results
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ]; then
          echo "❌ CI Pipeline Failed"
          exit 1
        else
          echo "✅ CI Pipeline Passed"
        fi
